const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Activity = require('../models/activitymodel');

// Get all activities (full details)
router.get('/activities', async (req, res) => {
  try {
    const activities = await Activity.find({});
    res.status(200).json(activities);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all activities with only ID and ActivityName (for listing)
router.get('/activity-list', async (req, res) => {
  try {
    const activities = await Activity.find({}, '_id ActivityName').sort({ ActivityName: 1 });
    res.status(200).json(activities);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get activity by ID
router.get('/activity/:id', async (req, res) => {
  const { id } = req.params;
  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ message: 'Invalid activity ID format' });
  }
  try {
    const activity = await Activity.findById(id);
    if (!activity) return res.status(404).json({ message: 'Activity not found' });
    res.status(200).json(activity);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get activity by ActivityName (case-insensitive)
router.get('/activity/name/:activityName', async (req, res) => {
  const { activityName } = req.params;
  try {
    const activity = await Activity.findOne({
      ActivityName: new RegExp(`^${activityName}$`, 'i'),
    });
    if (!activity) return res.status(404).json({ message: 'Activity not found' });
    res.status(200).json(activity);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new activity
router.post('/activities', async (req, res) => {
  try {
    const activity = await Activity.create(req.body);
    res.status(201).json(activity);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Update activity by ID
router.put('/activity/:id', async (req, res) => {
  const { id } = req.params;
  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ message: 'Invalid activity ID format' });
  }
  try {
    const activity = await Activity.findByIdAndUpdate(id, req.body, { new: true });
    if (!activity) return res.status(404).json({ message: 'Activity not found' });
    res.status(200).json(activity);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Delete activity by ID
router.delete('/activity/:id', async (req, res) => {
  const { id } = req.params;
  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ message: 'Invalid activity ID format' });
  }
  try {
    const activity = await Activity.findByIdAndDelete(id);
    if (!activity) return res.status(404).json({ message: 'Activity not found' });
    res.status(200).json({ message: 'Activity deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;
